#!/bin/bash
log=/var/log/cni.log
config=`cat /dev/stdin`

echo >> $log
echo "COMMAND: $CNI_COMMAND" >> $log

get_slice_id_from(){
    IN="$1"
    
    slice_id=$(echo $IN | tr "=" "\n" | sed -n 2p)
    echo "$slice_id"
}

get_pod_name_from(){
    cni_args="$1"
    pod_name_key_value=$(echo "$cni_args" | tr ";" "\n" | grep -w "K8S_POD_NAME")
    pod_name="$(cut -d'=' -f2 <<<"$pod_name_key_value")"
    echo "$pod_name"
}

should_ignore_pod(){
    cni_args="$1"
    if grep -q "IgnoreUnknown=1" <<< "$cni_args"; then
        return 0
    else
        return 1
    fi
}

case $CNI_COMMAND in
    ADD)
        echo "CNI_ARGS: $CNI_ARGS" >> $log
        echo "CNI_NETNS: $CNI_NETNS" >> $log
        echo "CNI_IFNAME: $CNI_IFNAME" >> $log
        echo "CNI_PATH: $CNI_PATH" >> $log
        echo "CNI_CONTAINERID: $CNI_CONTAINERID" >> $log
        
        
        # TODO check if the application has a slice_id field, if not, move to DELETE.
        
        podcidr=$(echo $config | jq -r ".podcidr") # 10.240.0.0./24
        podcidr_gw=$(echo $podcidr | sed "s:0/24:1:g") # 10.240.0.1
        
        # calculate $ip
        # This method is very simple. Just reads the file that holds the last IP and increment this read IP by one and update the file.
        if [ -f /tmp/last_allocated_ip ]; then
            n=`cat /tmp/last_allocated_ip`
        else
            n=1
        fi
        n=$(($n+1))
        ip=$(echo $podcidr | sed "s:0/24:$n:g")
        echo $n > /tmp/last_allocated_ip
        
        host_ifname="veth$n"
        ip link add $CNI_IFNAME type veth peer name $host_ifname
        ip link set $host_ifname up
        
        mkdir -p /var/run/netns/
        vale-ctl -a vale0:$host_ifname # Connect veth1 to the vale switch
        echo "Added iface: vale-ctl -a vale0:$host_ifname" >> $log
        ln -sfT $CNI_NETNS /var/run/netns/$CNI_CONTAINERID
        ip link set $CNI_IFNAME netns $CNI_CONTAINERID # Move rina0 to pod netns
        
        ip netns exec $CNI_CONTAINERID ip link set $CNI_IFNAME up
        ip netns exec $CNI_CONTAINERID ip addr add $ip/24 dev $CNI_IFNAME
        ip netns exec $CNI_CONTAINERID ip route add default via $podcidr_gw # TODO I think this is not needed
        
        mac=$(ip netns exec "$CNI_CONTAINERID" ip link show eth0 | awk '/ether/ {print $2}')
        address="${ip}/24"
        output_template='
        {
            "cniVersion": "0.3.1",
            "interfaces": [
                {
                    "name": "%s",
                    "mac": "%s",
                    "sandbox": "%s"
                }
            ],
            "ips": [
                {
                    "version": "4",
                    "address": "%s",
                    "gateway": "%s",
                    "interface": 0
                }
            ]
        }'
        echo "CNI_IFNAME $CNI_IFNAME" >> $log
        echo "mac $mac" >> $log
        echo "CNI_NETNS (sandbox) $CNI_NETNS" >> $log
        echo "address $address" >> $log
        echo "podcidr_gw $podcidr_gw" >> $log
        output=$(printf "${output_template}" "$CNI_IFNAME" "$mac" "$CNI_NETNS" "$address" "$podcidr_gw")
        
        if should_ignore_pod "$CNI_ARGS"; then
            echo "Ignoring pod $pod_name"  >> $log
        else
            pod_name=$(get_pod_name_from "$CNI_ARGS")
            kubectl_output=$(kubectl describe pod "$pod_name" | grep slice_id)
            slice_id=$(get_slice_id_from "$kubectl_output")
            
            echo "pod_name=$(get_pod_name_from "$CNI_ARGS")" >> $log
            echo "kubectl_output=$kubectl_output" >> $log
            echo "slice_id: $slice_id" >> $log
            rina_manager=$(echo $config | jq -r ".rina_manager")
            echo "rina_manager: $rina_manager" >> $log
            #TODO Test
            rina_manager="84.88.40.202:3003"
            slice_id="123456"
            curl -X 'POST' "http://$rina_manager/notify?slice_id=$slice_id&namespace=default" -H 'accept: application/json' -d ''
        fi
        
        echo $output >> $log
        echo "$output"
        
    ;;
    DEL)
        rm -rf /var/run/netns/$CNI_CONTAINERID
        vale-ctl -d vale0:$host_ifname
        echo "Deleted iface: vale-ctl -d vale0:$host_ifname" >> $log
    ;;
    
    GET)
    ;;
    
    VERSION)
        echo '{
  "cniVersion": "0.3.1",
  "supportedVersions": [ "0.3.0", "0.3.1", "0.4.0" ]
        }'
    ;;
    
    *)
        echo "Unknown cni command: $CNI_COMMAND"
        exit 1
    ;;
    
esac